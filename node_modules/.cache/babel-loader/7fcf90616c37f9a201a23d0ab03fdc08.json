{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport { fakeFetch } from \"../utils/fetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function useCustomFetch() {\n  _s();\n\n  const {\n    cache\n  } = useContext(AppContext);\n  const {\n    loading,\n    wrappedRequest\n  } = useWrappedRequest();\n  const fetchWithCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const cacheKey = getCacheKey(endpoint, params);\n    const cacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey);\n\n    if (cacheResponse) {\n      const data = JSON.parse(cacheResponse);\n      return data;\n    }\n\n    const result = await fakeFetch(endpoint, params);\n    cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(result));\n    return result;\n  }), [cache, wrappedRequest]);\n\n  const changeApprovalForId = (transactionId, transaction, newValue) => {\n    if (transaction.id === transactionId) {\n      return { ...transaction,\n        approved: newValue\n      };\n    }\n\n    return transaction;\n  };\n\n  const updateCacheOnTransactionApproval = useCallback((transactionId, newValue) => {\n    console.log(cache);\n\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    const transactionsByEmployeesKeys = Array.from(cache.current.keys()).filter(key => key.startsWith(\"transactionsByEmployee@\"));\n    transactionsByEmployeesKeys.forEach(key => {\n      const cachedData = cache.current.get(key);\n\n      if (cachedData) {\n        const parsedData = JSON.parse(cachedData);\n        const updatedData = parsedData.map(changeApprovalForId(transactionId, tra));\n        cache.current.set(key, JSON.stringify(updatedData));\n      }\n    }); // Also update paginatedTransactions cache if needed\n\n    const paginatedKeys = Array.from(cache.current.keys()).filter(key => key.startsWith(\"paginatedTransactions@\"));\n    paginatedKeys.forEach(key => {\n      const cachedData = cache.current.get(key);\n\n      if (cachedData) {\n        const parsedData = JSON.parse(cachedData);\n        console.log(\"parsed\", parsedData);\n        const updatedData = { ...parsedData,\n          data: parsedData.data.map(transaction => {\n            console.log(\"trans\", transaction);\n\n            if (transaction.id === transactionId) {\n              return { ...transaction,\n                approved: newValue\n              };\n            }\n\n            return transaction;\n          })\n        };\n        console.log(\"updated\", updatedData);\n        cache.current.set(key, JSON.stringify(updatedData));\n      }\n    });\n  }, [cache]);\n  const fetchWithoutCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const result = await fakeFetch(endpoint, params);\n    return result;\n  }), [wrappedRequest]);\n  const clearCache = useCallback(() => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    cache.current = new Map();\n  }, [cache]);\n  const clearCacheByEndpoint = useCallback(endpointsToClear => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    const cacheKeys = Array.from(cache.current.keys());\n\n    for (const key of cacheKeys) {\n      const clearKey = endpointsToClear.some(endpoint => key.startsWith(endpoint));\n\n      if (clearKey) {\n        cache.current.delete(key);\n      }\n    }\n  }, [cache]);\n  return {\n    fetchWithCache,\n    fetchWithoutCache,\n    clearCache,\n    clearCacheByEndpoint,\n    updateCacheOnTransactionApproval,\n    loading\n  };\n}\n\n_s(useCustomFetch, \"9ilFOwadaklKpyyCYT9PfC2U06o=\", false, function () {\n  return [useWrappedRequest];\n});\n\nfunction getCacheKey(endpoint, params) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`;\n}","map":{"version":3,"names":["useCallback","useContext","AppContext","fakeFetch","useWrappedRequest","useCustomFetch","cache","loading","wrappedRequest","fetchWithCache","endpoint","params","cacheKey","getCacheKey","cacheResponse","current","get","data","JSON","parse","result","set","stringify","changeApprovalForId","transactionId","transaction","newValue","id","approved","updateCacheOnTransactionApproval","console","log","undefined","transactionsByEmployeesKeys","Array","from","keys","filter","key","startsWith","forEach","cachedData","parsedData","updatedData","map","tra","paginatedKeys","fetchWithoutCache","clearCache","Map","clearCacheByEndpoint","endpointsToClear","cacheKeys","clearKey","some","delete"],"sources":["/Users/jareddiaz/Downloads/ramp-fe-challenge/src/hooks/useCustomFetch.ts"],"sourcesContent":["import { useCallback, useContext } from \"react\"\nimport { AppContext } from \"../utils/context\"\nimport { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\nimport { Transaction } from \"src/utils/types\"\n\nexport function useCustomFetch() {\n  const { cache } = useContext(AppContext)\n  const { loading, wrappedRequest } = useWrappedRequest()\n\n  const fetchWithCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const cacheKey = getCacheKey(endpoint, params)\n        const cacheResponse = cache?.current.get(cacheKey)\n\n        if (cacheResponse) {\n          const data = JSON.parse(cacheResponse)\n          return data as Promise<TData>\n        }\n\n        const result = await fakeFetch<TData>(endpoint, params)\n        cache?.current.set(cacheKey, JSON.stringify(result))\n        return result\n      }),\n    [cache, wrappedRequest]\n  )\n\n  \n  const changeApprovalForId = (transactionId: string, transaction: Transaction, newValue: boolean) => {\n    if (transaction.id === transactionId) {\n      return { ...transaction, approved: newValue };\n    }\n    return transaction;\n  }\n\n\n  const updateCacheOnTransactionApproval = useCallback(\n    (transactionId: string, newValue: boolean) => {\n      console.log(cache)\n      if (cache?.current === undefined) {\n        return;\n      }\n  \n      const transactionsByEmployeesKeys = Array.from(cache.current.keys()).filter((key) =>\n        key.startsWith(\"transactionsByEmployee@\")\n      );\n  \n      transactionsByEmployeesKeys.forEach((key) => {\n        const cachedData = cache.current.get(key);\n        if (cachedData) {\n          const parsedData = JSON.parse(cachedData);\n         \n          const updatedData = parsedData.map(changeApprovalForId(transactionId, tra));\n       \n          cache.current.set(key, JSON.stringify(updatedData));\n        }\n      });\n  \n      // Also update paginatedTransactions cache if needed\n      const paginatedKeys = Array.from(cache.current.keys()).filter((key) =>\n        key.startsWith(\"paginatedTransactions@\")\n      );\n  \n      paginatedKeys.forEach((key) => {\n        const cachedData = cache.current.get(key);\n        if (cachedData) {\n          const parsedData = JSON.parse(cachedData);\n          console.log(\"parsed\", parsedData)\n          const updatedData = {\n            ...parsedData,\n            data: parsedData.data.map((transaction: Transaction) => {\n              console.log(\"trans\", transaction)\n              if (transaction.id === transactionId) {\n                return { ...transaction, approved: newValue };\n              }\n              return transaction;\n            })\n          };\n          console.log(\"updated\", updatedData)\n          cache.current.set(key, JSON.stringify(updatedData));\n        }\n      });\n    },\n    [cache]\n  );\n\n  const fetchWithoutCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const result = await fakeFetch<TData>(endpoint, params)\n        return result\n      }),\n    [wrappedRequest]\n  )\n\n  const clearCache = useCallback(() => {\n    if (cache?.current === undefined) {\n      return\n    }\n\n    cache.current = new Map<string, string>()\n  }, [cache])\n\n  const clearCacheByEndpoint = useCallback(\n    (endpointsToClear: RegisteredEndpoints[]) => {\n      if (cache?.current === undefined) {\n        return\n      }\n\n      const cacheKeys = Array.from(cache.current.keys())\n\n      for (const key of cacheKeys) {\n        const clearKey = endpointsToClear.some((endpoint) => key.startsWith(endpoint))\n\n        if (clearKey) {\n          cache.current.delete(key)\n        }\n      }\n    },\n    [cache]\n  )\n\n  return { fetchWithCache, fetchWithoutCache, clearCache, clearCacheByEndpoint, updateCacheOnTransactionApproval, loading }\n}\n\nfunction getCacheKey(endpoint: RegisteredEndpoints, params?: object) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}